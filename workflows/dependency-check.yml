name: Dependency Version Checker

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests packaging
          
      - name: Run dependency checker
        id: dependency-check
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/check_dependencies.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          import subprocess
          import json
          import re
          from pathlib import Path
          import shutil
          
          def detect_package_managers(repo_dir):
              package_files = {
                  'package.json': 'npm',
                  'requirements.txt': 'pip',
                  'Pipfile': 'pipenv',
                  'composer.json': 'composer'
              }
              found_managers = {}
              for file_pattern, manager in package_files.items():
                  file_path = os.path.join(repo_dir, file_pattern)
                  if os.path.exists(file_path):
                      found_managers[manager] = file_path
              return found_managers
          
          def check_npm_packages(repo_dir):
              packages = []
              try:
                  with open(os.path.join(repo_dir, 'package.json'), 'r') as f:
                      pkg_data = json.load(f)
                      all_deps = {}
                      all_deps.update(pkg_data.get('dependencies', {}))
                      all_deps.update(pkg_data.get('devDependencies', {}))
                  
                  for pkg_name, current_version in all_deps.items():
                      current_version = current_version.replace('^', '').replace('~', '')
                      try:
                          result = subprocess.run(
                              ['npm', 'view', pkg_name, 'version'],
                              capture_output=True,
                              text=True,
                              check=True
                          )
                          latest_version = result.stdout.strip()
                          packages.append({
                              'name': pkg_name,
                              'current': current_version,
                              'latest': latest_version
                          })
                      except:
                          continue
              except Exception as e:
                  print(f"Error checking NPM packages: {e}")
              return packages
          
          def check_pip_packages(requirements_path):
              packages = []
              try:
                  with open(requirements_path, 'r') as f:
                      for line in f:
                          line = line.strip()
                          if line and not line.startswith('#'):
                              match = re.match(r'^([^=<>]+)(==|>=|<=|~=|!=|<|>)?(.+)?', line)
                              if match:
                                  pkg_name = match.group(1).strip()
                                  current_version = match.group(3).strip() if match.group(3) else "Not specified"
                                  try:
                                      result = subprocess.run(
                                          ['pip', 'index', 'versions', pkg_name],
                                          capture_output=True,
                                          text=True,
                                          check=True
                                      )
                                      versions = re.findall(r'\d+\.\d+\.\d+', result.stdout)
                                      if versions:
                                          latest_version = sorted(versions)[-1]
                                          packages.append({
                                              'name': pkg_name,
                                              'current': current_version,
                                              'latest': latest_version
                                          })
                                  except:
                                      continue
              except Exception as e:
                  print(f"Error checking pip packages: {e}")
              return packages
          
          def main():
              repo_dir = os.getcwd()
              results = {}
              package_managers = detect_package_managers(repo_dir)
              
              for manager, file_path in package_managers.items():
                  if manager == 'npm':
                      results['npm'] = check_npm_packages(repo_dir)
                  elif manager == 'pip':
                      results['pip'] = check_pip_packages(file_path)
              
              with open('dependency-report.json', 'w') as f:
                  json.dump(results, f, indent=2)
          
          if __name__ == "__main__":
              main()
          EOF
          
          chmod +x .github/scripts/check_dependencies.py
          python .github/scripts/check_dependencies.py
        
      - name: Format and Post Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '# üì¶ Dependency Version Check Report\n\n';
            
            try {
              const checkResults = fs.readFileSync('dependency-report.json', 'utf8');
              const results = JSON.parse(checkResults);
              
              for (const [manager, packages] of Object.entries(results)) {
                if (packages.length > 0) {
                  comment += `### ${manager.toUpperCase()} Dependencies\n`;
                  comment += '| Package | Current Version | Latest Version | Status |\n';
                  comment += '|---------|----------------|----------------|--------|\n';
                  
                  for (const pkg of packages) {
                    const status = pkg.current !== pkg.latest ? '‚ö†Ô∏è Outdated' : '‚úÖ Up to date';
                    comment += `| ${pkg.name} | ${pkg.current} | ${pkg.latest} | ${status} |\n`;
                  }
                  
                  comment += '\n';
                }
              }
            } catch (error) {
              comment += '‚ö†Ô∏è No dependency files found or error checking dependencies.\n\n';
              comment += 'Make sure you have one of these files:\n';
              comment += '- package.json (for NPM packages)\n';
              comment += '- requirements.txt (for Python packages)\n';
            }
            
            if (context.payload.pull_request) {
              // For pull requests
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: comment
              });
            } else {
              // For push events, create an issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üì¶ Dependency Version Check Report',
                body: comment
              });
            } 
